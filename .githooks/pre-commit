#!/usr/bin/env python3
import subprocess
import os
import logging
import json

# Set up logger.
logging.basicConfig(format="(Pre-Commit Hook, %(levelname)s): %(message)s")
logging.root.setLevel(logging.INFO)

# Declare man files.
man_files = {
    "man/makedeb.8.adoc": "makedeb_man_epoch",
    "man/pkgbuild.5.adoc": "pkgbuild_man_epoch"
}

# Go to root of Git directory.
git_dir = subprocess.run(["git", "rev-parse", "--show-toplevel"],
                         stdout=subprocess.PIPE,
                         universal_newlines=True)

if git_dir.returncode != 0:
    logging.error("Failed to get the top level directory of the Git repository.")
    exit(1)

os.chdir(git_dir.stdout.strip())

# Get files that are trying to be committed.
changed_files = subprocess.run(["git", "diff", "--cached", "--name-only"],
                               stdout=subprocess.PIPE,
                               universal_newlines=True)

if changed_files.returncode != 0:
    logging.error("Failed to get the list of changed files.")
    exit(1)

changed_files = changed_files.stdout.splitlines()

# Check if we need to verify any man pages.
check_man_epochs = False

for i in man_files.keys():
    if i in changed_files:
        check_man_epochs = True
        break

if check_man_epochs == False:
    exit(0)

# Open config file.
file = open(".data.json", "r")
data = file.read()
file.close()

try:
    config = json.loads(data)
except json.decoder.JSONDecodeError as exception:
    logging.error("Failed to parse config file.")
    logging.error(exception)
    exit(1)

# Compare the version of each specified file, and update its recorded epoch if necessary.
update_config_file = False
changed_files = []

for i in man_files.keys():
    key_value = man_files[i]

    second_to_last_commit_sha = subprocess.run(["git", "log", "HEAD~", "-1", "--pretty=%H"],
                                               stdout=subprocess.PIPE,
                                               universal_newlines=True)

    if second_to_last_commit_sha.returncode != 0:
        logging.error("Failed to get commit sha information to compare man page versions against.")
        exit(1)

    second_to_last_commit_sha = second_to_last_commit_sha.stdout.strip()

    git_file_content = subprocess.run(["git", "show", "-P", f"{second_to_last_commit_sha}:{i}"],
                                      stdout=subprocess.PIPE,
                                      universal_newlines=True)

    if git_file_content.returncode != 0:
        exit(1)

    git_file_content = git_file_content.stdout

    file = open(i, "r")
    current_file_content = file.read()
    file.close()

    if current_file_content != git_file_content:
        changed_files += [i]
        current_sha = subprocess.run(["stat", "--printf=%Y", i], stdout=subprocess.PIPE, universal_newlines=True).stdout.strip()

        if config[key_value] != current_sha:
            update_config_file = True
            config[key_value] = current_sha

if update_config_file:
    logging.info("Updating .data.json with new epochs for man pages...")
    
    with open(".data.json", "w") as file:
        json_object = json.dumps(config, indent="\t")
        file.write(json_object)

    git_add_command = " ".join(changed_files)

    logging.info("Succesfully updated .data.json with new epochs.")
    logging.info("Please run 'git add .data.json' in the root of the repository, then rerun your commit command to succesfully commit your changes.")
    
    exit(1)
